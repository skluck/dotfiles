# ------------------------------------------------------------------------------
# posix helpers
# ------------------------------------------------------------------------------

function l()
{
    ls -halFG $@
}

# ------------------------------------------------------------------------------
# docker helpers
# ------------------------------------------------------------------------------

function drun()
{
    docker run --rm -it $@
}

function drune()
{
    docker run --rm -it --entrypoint='' $@
}

# ------------------------------------------------------------------------------
# ai helpers
# ------------------------------------------------------------------------------

function ai()
{
    local command="${1}"

    if [[ -n "${command}" ]] ; then
        shift
        ai_${command} "$@"
    else
        echo "ai_() requires a subcommand. Check in ~/zshell/.zprofile.functions"
        grep "function ai_" ~/zshell/.zprofile.functions | grep -v "grep" | sort
        return 1
    fi
}

function ai_run()
{
    gh models run "openai/gpt-4.1" $@
}

function ai_which()
{
    gh models list
}

# ------------------------------------------------------------------------------
# terraform helpers
# ------------------------------------------------------------------------------

function tf()
{
    local command="${1}"

    if [[ -n "${command}" ]] ; then
        shift
        tf_${command} "$@"
    else
        echo "tf() requires a subcommand. Check in ~/zshell/.zprofile.functions"
        echo ""
        echo "Try one of:"
        echo "- tf fmt <dir>"
        echo "- tf docs <dir>"
        echo "- tf lock"
        return 1
    fi
}

function tf_fmt()
{
    terraform fmt -write=false -diff -check -recursive $@
}

function tf_docs()
{
    terraform-docs markdown table --output-file README.md $@
}

function tf_lock()
{
    terraform providers lock -platform=darwin_arm64 && \
    terraform providers lock -platform=darwin_amd64 && \
    terraform providers lock -platform=linux_amd64 && \
    terraform providers lock -platform=linux_arm64
}

# ------------------------------------------------------------------------------
# git helpers
# ------------------------------------------------------------------------------

function g()
{
    git status -s
}

function gl()
{
    if [[ -z $1 ]]; then
        local commit_num=30
    else
        local commit_num=$1
    fi

    git lg \
    --graph \
    --abbrev-commit \
    --date=relative \
    -$commit_num
}

# ------------------------------------------------------------------------------
# bash/zsh helpers
# ------------------------------------------------------------------------------

function editbash()
{
    local command="${1}"
    if [[ -z "${command}" ]] ; then
        command="code"
    fi

    $command \
        ~/.zprofile \
        ~/.zshrc \
        ~/.zshenv \
        ~/zshell \
        ~/bin
}

function reloadbash()
{
    echo 'Reloading shell profile'
    source ~/.zprofile
}

function reloadbashf()
{
    echo 'Reloading shell functions'
    source ~/zshell/.zprofile.functions
}

function scheck()
{
    if [[ -z "$@" ]] ; then
        shellcheck -o all *.sh
        return
    fi

    shellcheck -o all "$@"
}

# ------------------------------------------------------------------------------
# kube helpers
# ------------------------------------------------------------------------------

function k()
{
    local command="${1}"

    if [[ "${command}" == "k" ]] ; then
        shift
        kubectl "$@"

    elif [[ -n "${command}" ]] ; then
        shift
        k_${command} "$@"
    else
        echo "k() requires a subcommand. Check in ~/zshell/.zprofile.functions"
        grep "function k_" ~/zshell/.zprofile.functions | grep -v "grep" | sort
        return 1
    fi
}

function k_all()
{
    kubectl get all,cm,secret,serviceaccount,pv,pvc,pdb,secret
    kubectl get ing,ingressroutes
    kubectl get scaledobject
}

function k_drain()
{
    help="Syntax: k drain NODE_NAME"
    test -n "$1" || {echo $help && return}

    set -x
    kubectl drain $1 --ignore-daemonsets --delete-emptydir-data $@
}

function k_explain()
{
    help="Syntax: k explain RESOURCE.PATH"
    test -n "$1" || {echo $help && return}

    set -x
    kubectl explain $@ --recursive
}

function k_get()
{
    help="Syntax: k get RESOURCE"
    test -n "$1" || {echo $help && return}

    kubectl get -o=yaml $@
}

function k_getall()
{
    NAMES="$(kubectl api-resources \
        --namespaced \
        --verbs list \
        -o name \
    | tr '\n' ,)"

    # ${NAMES:0:-1} -- because of `tr` command added trailing comma
    # --show-kind is optional
    kubectl get "${NAMES:0:-1}" --show-kind
}

function k_logs()
{
    help="Syntax: k logs POD_NAME"
    test -n "$1" || {echo $help && return}

    kubectl logs -f "$1"
}

function k_nodes()
{
    kubectl get nodes \
    --sort-by=.metadata.creationTimestamp \
    '-o=custom-columns=NAME:.metadata.name,STATUS:status.conditions[-1].type,AGE:.metadata.creationTimestamp,TYPE:.metadata.labels.node\.kubernetes\.io/instance-type,ID:.metadata:.metadata.annotations.csi\.volume\.kubernetes\.io/nodeid'
}

function k_node_pods()
{
    help="Syntax: k node_pods NODE_NAME"
    test -n "$1" || {echo $help && return}

    kubectl get pods -A -o wide --field-selector spec.nodeName="$1"
}

function k_ns()
{
    kubectl get namespace
}

function k_pods()
{
    kubectl get pods,deployments,jobs,daemonsets,statefulsets $@
}

function k_podall()
{
    kubectl get pod -A '-o=custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace,STATUS:.status.phase,NODE:.spec.nodeName,CPU:.spec.containers[*].resources.requests.cpu,MEM:.spec.containers[*].resources.requests.memory'
}

function k_podcpu()
{
    kubectl get pod '-o=custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.spec.nodeName,CPU:.spec.containers[*].resources.requests.cpu,MEM:.spec.containers[*].resources.requests.memory'
}

function k_podbad()
{
    kubectl get pods -A \
        | grep -v Running \
        | grep -v Completed
}

function k_shell()
{
    help="Syntax: k shell POD_NAME"
    test -n "$1" || {echo $help && return}

    kubectl exec --stdin --tty "$1" -- /bin/sh
}

function k_tunnel()
{
    help="Syntax: k tunnel POD_OR_SERVICE_NAME LOCAL_PORT:REMOTE_PORT"
    test -n "$1" || {echo $help && return}
    test -n "$2" || {echo $help && return}

    IFS=: read -r from to <<< "$2"
    test -n "$from" || {echo $help && return}
    test -n "$to" || {echo $help && return}

    set -x
    kubectl port-forward $1 $from:$to
}

function k_tunnelmake()
{
    # Format "k tunnelmake myservice database.example.com:5432"
    help="Syntax: k tunnelmake TEMP_SERVICE_NAME DB_HOST:REMOTE_PORT"
    test -n "$1" || {echo $help && return}
    test -n "$2" || {echo $help && return}

    IFS=: read -r endpoint port <<< "$2"
    test -n "$endpoint" || {echo $help && return}
    test -n "$port" || {echo $help && return}

    service_name="$1-$(date -u '+%Y-%m-%d')"
    docker_image="alpine/socat"

    local_port="${port}${port: -1}"

    echo "Run the following after tunnel service is up:"
    echo "k tunnel service/$service_name ${local_port}:${port}"
    echo

    kubectl run "${service_name}" --image="${docker_image}" \
    -it --tty --rm --expose=true --port=${port} \
    tcp-listen:${port},fork,reuseaddr \
    tcp-connect:${endpoint}:${port}
}

function k_busybox()
{
    kubectl run -i -t --image=busybox --restart=Never $@
}

# ------------------------------------------------------------------------------
# aws helpers
# ------------------------------------------------------------------------------

function eksup()
{
    local -r cluster="${1}"
    local extra=""
    local -r default_region="us-east-1"

    if [ -z "${cluster}" ] ; then
        echo "Error: Cluster is required"
        return 1
    fi

    if [ -n "${2}" ] ; then
        extra="--region ${2}"
    else
        extra="--region $default_region"
    fi

    aws eks update-kubeconfig --name $cluster $extra
}

function ecrup()
{
    local extra=""
    local -r default_region="us-east-1"

    if [ -n "${1}" ] ; then
        extra="--region ${1}"
    else
        extra="--region $default_region"
    fi

    eval $(aws ecr get-login --no-include-email $extra)
}

function awsup()
{
    eval $(aws_import_creds.sh)
}

# quickly switch between AWS profiles
awsp() {
    if [[ "${1}" == "clear" ]] ; then
        if [[ -n "${AWS_PROFILE}" ]] ; then
            echo 'Clearing $AWS_PROFILE'
            unset AWS_PROFILE
        else
            echo 'No $AWS_PROFILE currently set'
        fi
    elif [[ "${1}" == "current" ]] ; then
        if [[ -n "${AWS_PROFILE}" ]] ; then
            awsp_current
        else
            echo 'No $AWS_PROFILE currently set'
        fi
    elif [[ -n $1 ]] ; then
        # validate input
        grep -q -w "\[profile ${1}\]" ~/.aws/config || { echo "No such profile $1"; return 1; }
        export AWS_PROFILE=$1

        # check if we already have valid creds
        if ! aws sts get-caller-identity >/dev/null 2>&1; then
            echo 'No auth found'
        fi

        awsp_current
    else
        echo 'No profile provided. (pass "clear" to clear profile)'
        echo 'Select one:'
        echo
        aws configure list-profiles
        return 2
    fi
}

awsp_current() {
    account_name=$(aws iam list-account-aliases --output text --query 'AccountAliases[0]' 2>/dev/null || true)
    account_id=$(aws sts get-caller-identity --output text --query 'Account' 2>/dev/null || true)
    aws_user=$(aws sts get-caller-identity --output text --query 'Arn' 2>/dev/null || true)

    echo "Signed in to \"${account_name} (${account_id})\" as \"${aws_user}\""
}

# ------------------------------------------------------------------------------
# general helpers
# ------------------------------------------------------------------------------

# Get public key for authorized_keys from a private key
function getpubkey()
{
    ssh-keygen -y -f $@
}

# Cat contents of a file between provided line numbers
# Usage:
# catline <LINE_START> <LINE_END> <FILE>
function catline()
{
   sed -n -e "$1,$2 p" -e "$2 q" $3
}

# Add spacer to MacOS dock
function dock_space()
{
   defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
   killall Dock
}

# ------------------------------------------------------------------------------
# Mac M1 helpers
# ------------------------------------------------------------------------------

# Run a script or command with rosetta
function x86()
{
   arch --x86_64 $@
}

function m1()
{
   arch --arm64 $@
}

function whatami()
{
    uname -m
}
